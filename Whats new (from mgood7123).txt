version 1.2:

Fixes: Eval11 : fixed a bug where the variables where set before they where pushed instead of after

Updated: diff : now attempts to paginated output

Updated: disassembler now defines MDISASSEMBLER

Fixed: shell : colour.h should now compile appropriately for x86 and cpp 1.12

Fixed: evaldemo.c : fixed incorrect header paths

Fixed: vcpu disassembler :
    fixed memory bugs relating to the opcode structure read/write
    
    fixed a bug where opcode structure read/write was being read and written incorrectly leading to lack of data vs expected data length, eg it has 32 bytes to write, incorrectly writes 16 bytes, and reads 16 bytes incorrectly into the structure

Updated: vcpu disassembler : opcode structure is no longer padded and will write from/read into correctly (eg can read/write 7 bytes instead of fixed 8 bytes)

New: atexitfix : small fix for atexit(): normal atexit() does not call its registered functions in reverse order like gnu atexit does, making functions registered first be called first instead of last

Fixed: Signal Handler : now pauses when there is a infinite signal loop, eg SIGBUS > _Exit > SIGBUS

Fixed: shell : fixed memory bugs in env__* functions resulting in the possibility of a corrupted environment

Updated: Shell : added env_append_env: appends an environment to another environment

Updated: vcpu :
    vcpu now has a integrated assembly assembler, parser, disassembler, and decoder, powered by a modified version of the eval11 expression library (https://www.parsifalsoft.com/examples/evalexpression/index.html), allowing the cpu to actually use assembly
    
    vcpu now supports assembly, including the use of operands, registers, and hexadecimal (hex is not implemented yet)

Changes: vcpu : original vcpu.c moved to vcpu/minimal_cpu_test.c in favor of the updated vcpu, kept for historical purposes as a minimal implementation

New Command: vcpu : tests the virtual cpu

New: vcpu : hand coded modular virtual cpu implementation

as the name suggests, this is a hand coded from scratch, modular virtual cpu emulator, designed to be modular and portableish (compiles with x86 gnu gcc and Mobile C CPP 1.12.10, unknown if compiles with other compilers)

the cpu has a pre built, work in progress, default cpu structure named default_cpu, but new ones can be made as you see fit, but this is not recommended as you would, due to the possible change in cpu structure, re implement all functions to work with the new structure

the structure of a cpu:

struct virtual_cpu_register_bank {
    int r1;
    int r2;
    int r3;
    int32_t pc;
    char * name;
    CPU_TYPE type;
};

struct virtual_cpu_sub_core {
    struct virtual_cpu_register_bank virtual_register;
    int op;
    int status;
    char * name;
};

struct virtual_cpu_core {
    struct virtual_cpu_sub_core previous;
    struct virtual_cpu_sub_core current;
    int status;
    int power;
    char * cpu_power_state[2];
    char * name;
    bool init;
};

struct virtual_cpu {
    int core_count;
    struct virtual_cpu_core *core;
    struct Queue *q;
    char ** table_instructions;
    char ** table_types;
    char ** table_registers;
    char ** table_encoding;
    struct instruction * instruction_bank;
    char * name;
} cpu_default;

as you can see its structure is fairly complex (and as such it is NOT recommended that you attempt to modify this unless you know what you are doing, adding additional members is OK tho) and most of it is not yet functional, such as use of multiple cores (threading), and a meaningfull power status, (for example, when the cpu is powered off all que and execute functions using that cpu should not work), a FULL set of registers, stack, cpu cache line, multiple instruction sets, etc, this is planned to be supported

the cpu can have unlimited cores, but by default this is limited to a maximum of 32 cores, (cus imagine just printing the information for 999+ cores), and by default it initializes with 32 cores, but only uses 1 due to lack of thread support

note: thread support does not refer to pthreads, thread support refers to the ability to split a cpu's load across multiple cores

the cpu currently uses a queue and execute system, queue() will queue an assembly string for assembling, and execute() will parse, assemble, and execute the current queue, in the order it is queued, until the queue is empty, as opposed to the standard cpu execution sequence: [ Instruction Fetch, Instruction Decode, Execute, Memory access, Register write back ] (https://en.wikipedia.org/wiki/Instruction_pipelining)

example of queue and execute in pure assembler:

// the guts of our queue/execute system, without this we can queue and execute as much as we want and nothing will happen

#include "cpu_language.h"

void setup_decoding_information(struct instruction ** instruction_bank) {
    instruction_add(instruction_bank, "instruction_add");
    instruction_add_operands(instruction_bank, "instruction_add", "register_r1, register_r2"); // if this step is omitted all registers in the operations shall become IMPLICIT
    instruction_add_operations(instruction_bank, "instruction_add", "register_r3 = register_r1 + register_r2");
    instruction_finalize(instruction_bank);
    
    instruction_add(instruction_bank, "instruction_add3");
    instruction_add_operands(instruction_bank, "instruction_add3", "a, b, c"); // if this step is omitted all registers in the operations shall become IMPLICIT
    instruction_add_operations(instruction_bank, "instruction_add3", "a = (b * c) + c; a += (c*c)*a");
    instruction_finalize(instruction_bank);

    instruction_add(instruction_bank, "instruction_mov");
    instruction_add_operands(instruction_bank, "instruction_mov", "register_r1, register_r2"); // if this step is omitted all registers in the operations shall become IMPLICIT
    instruction_add_operations(instruction_bank, "instruction_mov", "register_r2 = register_r1");
    instruction_finalize(instruction_bank);
}

int main()
{
    char ** table_instructions;
    char ** table_types;
    char ** table_registers;
    char ** table_encoding;
    init_table(&table_instructions, &table_types, &table_registers, &table_encoding);
    instruction_new_bank(test);
    setup_decoding_information(&test);
    parse(table_encoding, "instruction_mov 19, register_r1");
    parse(table_encoding, "instruction_mov 1, register_r2");
    parse(table_encoding, "instruction_add register_r1, register_r2");
    parse(table_encoding, "instruction_add3 register_r3, register_r3, register_r3");
    puts("writing from opcode_structure to testcpuwrite");
    opcode_structure_write("testcpuwrite", "w");
    puts("reading from testcpuwrite into opcode_structure");
    opcode_structure_read("testcpuwrite");
    opcode_structure_print_all();
    cpu_decode(table_encoding, table_types, table_registers, test, 0);
    cpu_decode(table_encoding, table_types, table_registers, test, 1);
    cpu_decode(table_encoding, table_types, table_registers, test, 2);
    cpu_decode(table_encoding, table_types, table_registers, test, 3);
    opcode_structure_clear_all();
    instruction_delete_bank(&test);
    denit_table(&table_instructions, &table_types, &table_registers, &table_encoding);
    return 0;
}



this, when compiled, will:
assemble the following assembly:
mov 19, r1
mov 1, r2
add r1, r2
add3 r3, r3, r3
write the assembled code into the file "testcpuwrite"
read the assembled code from "testcpuwrite" back into the structure
print the structure
execute the assembled code
then clean up

in detail:
we first include the full assembler itself, cpu_language.h,

next we declare and initialize our tables: instructions, types, registers, and encoding
the existence of these tables (while they can be named anything), are vital to the functionality of the assembler, these, separate, define the instruction list, argument types, and register list, and when combined into the table encoding, form a complete Instruction Set Architecture

next we create a new instruction bank which holds all the decoding information required to successfully disassemble, decode, and execute our instructions

next we initialize out instruction bank:
    first we add an instruction, this MUST be done before all other operations and is REQUIRED by all other operations except finalization
    
    next we add an operand definition to our instruction, these MUST be unique per instruction, no two identifiers are allowed to be the same, identifiers can be any alphanumerical character, but is NOT allowed to be a single digit (note this is a bug, single digits SHOULD be valid, but the parser cannot process them correctly)
    
    next we add some operations for our instruction to preform when executed, any items NOT defined in the operands are automatically declared as IMPLICIT and are not required in the statement itself, any MATCHING items will be replaced with the appropriate contents of the operands identifiers, regardless of the position of either operation/operand, as you can see by instruction_add3, multiple operations ARE allowed in a single instruction, seperated by ; itself
    
    finally we finalize the instruction, this just increases the instruction bank index to the next index
    
    then we repeat this process to add other instructions

next we parse and execute our assembly

you will notice that i do not just parse then decode directly without writing anything to file, and with good reason:
while it IS capable of executing entirely in memory, it ALSO needs a way to execute from a file, and thus cannot rely directly on the parser to hand us the required information for us such as all the registers and numbers and instructions parsed and assembled

parse() will parse an instruction and attempt to internally assemble it into a valid opcode structure which can be:
written to a file using opcode_structure_write
examined with opcode_structure_print
cleared with opcode_structure_clear
or executed with cpu_decode

opcode_structure_write writes the entire opcode structure into a file, it accepts the same arguments as fread does

opcode_structure_read clears the current opcode structure if present, then allocates a new opcode structure and reads the opcode structure from a file into the opcode_structure, and checks for incomplete structure tail and warns if present, indicating the possibility the file is damaged or corrupted

opcode_structure_print and opcode_structure_clear take a index into the opcode structure, and those suffixed with _all take no index, and operate on all available indexes of the opcode structure

opcode_structure_print will print the specified opcode structure index

opcode_structure_clear will clear the specified opcode index, and, if the specified index is the last index that was written, decreases the internal parser index

opcode_structure_print_all will print all available opcode structure indexes

opcode_structure_clear_all will clear the current opcode structure, free it, NULL it, then reset the parser index to 0, as if the opcode_structure was never initialized

cpu_disassemble will attempt to disassemble an opcode structure and attempt to produce a valid operations string with all text replacement done

cpu_decode will decode a specified opcode_structure structure index, internally disassembling it and using the string obtained during disassembling to execute the instruction

finally after everything is done we clean everything up by clear all opcode structures and deleting the instruction bank

binding of operands to external variables such as registers can be done via Expression_Assign("register_r1", &cpu->core[0].current.virtual_register.r1)

in this case the variable "register_r1" is binded to the variable cpu->core[0].current.virtual_register.r1
variables being binded MUST be of type int, and MUST be the address to the value of the variable being binded, pointers to an int type also suffice but must be binded accordingly, it will not dereference pointers for you

for example:
declaring int * i then binding to i itself will bind it to the address of i, which WILL work
binding to *i will bind to the value of i and will not work
binding to &i will bind to the address of the pointer to i (int ** i) and will not work

declaring int i then binding to i will not work
binding to &i will work

when a variable is binded to an operand any changes to that operands value is reflected in the variable and vice versa, note this only takes place after string replacement in cpu_decode, for example is the resulting string contains "R1" (eg, R1 is recognised, SR1L is NOT recognised) and R1 is binded then any changes to R1 will be present in the binded value, retrieval of this value manually without binding is possible but somewhat tedious as it is stored in a structured array:

struct VariableDescriptor {
  char   *name;
  EVAL_TYPE * valueptr; // shall be a pointer to a external variable otherwise shall point to value
  EVAL_TYPE value;      // this is what valueptr points to when not binded
};

by default it is assigned to "variable" and can be retrieved via:

int returnvar(char * string) {
    for (int i = 0; i < nVariables; i++) if (strcmp(variable[i].name, string) == 0) return *variable[i].valueptr;
}
printf("value of R1 is %d\n", returnvar("R1"));

format CAN be changed by modifying EVAL_TYPE but this is not recommended due to printf formatting being hard-coded to type int

for convinience every cpu structure has its own name

detailed information about the cpu can be retrieved via cpu_info()
for example:
VIRTUAL CPU: INFO : cpu name:         cpu_default
VIRTUAL CPU: INFO : cpu cores:        32
VIRTUAL CPU: INFO : size of cpu_default: 5904
VIRTUAL CPU: INFO : size of instruction table: 0
VIRTUAL CPU: INFO : size of types table:       0
VIRTUAL CPU: INFO : size of registers table:   0
VIRTUAL CPU: INFO : size of encoding table:    0
VIRTUAL CPU: INFO : size of instruction bank:  0
VIRTUAL CPU: INFO : cpu_default : core name:  Core 0
VIRTUAL CPU: INFO : cpu_default : size of Core 0: 184
VIRTUAL CPU: INFO : cpu_default : Core 0 : cpu power status: OFF
VIRTUAL CPU: INFO : cpu_default : Core 0 : status:           0
VIRTUAL CPU: INFO : cpu_default : Core 0 : sub core name: PREVIOUS
VIRTUAL CPU: INFO : cpu_default : Core 0 : size of PREVIOUS: 48
VIRTUAL CPU: INFO : cpu_default : Core 0 : PREVIOUS : register bank name: register
VIRTUAL CPU: INFO : cpu_default : Core 0 : PREVIOUS : size of register: 32
VIRTUAL CPU: INFO : cpu_default : Core 0 : PREVIOUS : register : r1: 0
VIRTUAL CPU: INFO : cpu_default : Core 0 : PREVIOUS : register : r2: 0
VIRTUAL CPU: INFO : cpu_default : Core 0 : PREVIOUS : register : r3: 0
VIRTUAL CPU: INFO : cpu_default : Core 0 : PREVIOUS : register : pc: 0
VIRTUAL CPU: INFO : cpu_default : Core 0 : sub core name: CURRENT
VIRTUAL CPU: INFO : cpu_default : Core 0 : size of CURRENT: 48
VIRTUAL CPU: INFO : cpu_default : Core 0 : CURRENT : register bank name: register
VIRTUAL CPU: INFO : cpu_default : Core 0 : CURRENT : size of register: 32
VIRTUAL CPU: INFO : cpu_default : Core 0 : CURRENT : register : r1: 0
VIRTUAL CPU: INFO : cpu_default : Core 0 : CURRENT : register : r2: 0
VIRTUAL CPU: INFO : cpu_default : Core 0 : CURRENT : register : r3: 0
VIRTUAL CPU: INFO : cpu_default : Core 0 : CURRENT : register : pc: 0





















version 1.1

Changes: dotgit : integrated the standalone command "dotgit" into the list of Git commands

Changes: Git : moved callbacks into seperate folder


New Feature: Garbage Collector : fairly stable garbage collector based on tgc's garbage collector
the Garbage Collector is to be included via :

#include <gc.h>

once it has been installed with

GCInstall

and can be uninstalled with

GCUninstall


CANNOT detect mallocs from internal functions such as strdup or printf
unknown if thread safe or not
the Garbage Collector can be paused/resumed with Garbage_Collector_Pause() Garbage_Collector_Resume(), and can be manually started and stopped with Garbage_Collector_Start() and Garbage_Collector_Shutdown

Garbage Collector API provides numerous callbacks for debugging, via the following structures:

typedef struct {
	void (*callback_entry)(void*);
	void (*callback_exit)(void*);
	void (*callback_source)(char*,int,char*);
	void (*callback_error)(char*,char*);
	void (*callback_forgot_to_init)(char*);
	void (*callback_unfreed_info)(FILE*,tgc_ptr_t);
	void (*callback_unfreed_total)(FILE*,size_t);
	void (*callback_add)(void*,size_t);
	void (*callback_remove)(void*);
	void (*callback_realloc)(void*, size_t);
	void (*callback_free)(void*);
	void (*callback_startup)(int);
	void (*callback_shutdown)(int);
	void (*callback_pause)(int);
} tgc_callbacks;

typedef struct {
  tgc_callbacks callbacks;
  int init;
  void *bottom;
  int paused;
  uintptr_t minptr, maxptr;
  tgc_ptr_t *items, *frees;
  double loadfactor, sweepfactor;
  size_t nitems, nslots, mitems, nfrees;
} tgc_t = {0};



Garbage Collector provides its own default callbacks which can be overriden if required:

either in full:


tgc_t Garbage_Collector_Program;

tgc_callbacks tgc_callbacks_default = {
	tgc_callbacks_default_entry,
	tgc_callbacks_default_exit,
	tgc_callbacks_default_source,
	tgc_callbacks_default_error,
	tgc_callbacks_default_forgot_to_init,
	tgc_callbacks_default_unfreed_info,
	tgc_callbacks_default_unfreed_total,
	tgc_callbacks_default_add,
	tgc_callbacks_default_remove,
	tgc_callbacks_default_realloc,
	tgc_callbacks_default_free,
	tgc_callbacks_default_startup,
	tgc_callbacks_default_shutdown,
	tgc_callbacks_default_pause
};

Garbage_Collector_Program.callbacks = tgc_callbacks_default;


or set individually:


void user_callback(int status) {
	if (status == Garbage_Collector_Events_Startup_Begin) puts("Garbage Collector: Starting ");
	else if (status == Garbage_Collector_Events_Startup_End) puts("Garbage Collector: Successfully started");
	else printf("Garbage Collector: Received unknown status: %d\n", status);
	return;
}


gc->callbacks.callback_startup = user_callback;



note: all callbacks MUST return, if a value is provided it is UNUSED, the program will segmentation fault (SEGSEGV) if the callback does not return, the callback type is unspecified and does not affect the callback itself



WARNING: Garbage Collection uses considerable overhead and will increase runtime tenfold on malloc/realloc/free intensive tasks, DOES NOT WORK FOR C++

Garbage Collector is automatically included in my commands (eg shell, argv, help (warents enough reason to include garbage collector due to it using mallocs), getline, and so on

debugging flags:
Garbage_Collector_Debug = 
Garbage_Collector_Debug_None | 
Garbage_Collector_Debug_Normal | 
Garbage_Collector_Debug_List | 
Garbage_Collector_Debug_Free | 
Garbage_Collector_Debug_Realloc

option flags:
Garbage_Collector_Options = 
Garbage_Collector_Options_Default |
Garbage_Collector_Options_No_Recycle |
Garbage_Collector_Options_Recycle |
Garbage_Collector_Options_Quiet 

by default the Garbage_Collector_Options_No_Recycle is turned on by default as it is safest, recycling frees memory if the current number of mallocs goes over a certain limit and is to be done with caution, as it CAN mess with the memory of programs by freeing memory that is not meant to be freed, however it can save ALOT of memory if recycling is turned on, for example if you malloc 4kb 1000 times in a row, with recycling chances are only 8kb will actually be malloced and will never exceed 8kb, without recycling 4000kb will be malloced

note all options including debugging options can be turned on or off at any point of the programs execution



Garbage_Collector_Dump_Mem(File * fp) will dump a list of all STILL IN USE pointers allocated by the garbage collector, along with, if available, the source lines of where they originated





New Feature:  Signal Handler : included with Garbage Collector to aid in Garbage collection in the event the program crashes for any reason, dumps and cleans up on the event of a crash

New Command: GarbageCollectorTest : tests the garbage collector

New Command: realpath: GNU CoreUtils port of realpath, with tiny additional error checking such as warning if PATH (of --relative-to=PATH argument) is non existant or is a file, as it expects a directory

New Beta header: disassembler.h : a very beta, long term project,  C function disassembler, proof of concept

Fixed: Shell : Shell should now work again



version 1.0

Merged current shell

Merged current git

New (more stabler) find command

New Command: dotgit (moved .git to dotgit if it is present) (kinda like an alias lol)

New Command: colors: display a list of supported printable color combinations along with that they actually look like

New Command: fecho : like echo but with the option to output to a file

New Command: bom : displays a cat of the file and displays wether it contains a BOM mark or not, and if so displays info such as BOM type, BOM length, and the BOM itself in hex

Updated: help : now displays valid commands located in cwd, reinforces the display of VALID executable formats such as .py, .ll, c, and others, now makes SURE that commands that exist in there respective folders are displayed, for example, cp/cp.proj.c, Shell/shell.h, cp will show as a command but Shell will not show as a command, currently obeys the execution rule that it will execute a command in a folder if it is conforms to this syntax: [cmd]/[cmd].proj.c, the rule applies to all locationes searched by help (including the cwd)

New Command: ln: creates symlinks (currently useless in ios but would be assumed to work in android)

New Command: argv : displays argument count and argument contents

New Command: mmaps : (ios only) attempts to emulate [cat /proc/self/maps], unknown wether mappings displayed are correct or if they are garbage but at least it is something

New Command: raw : displays raw input in decimal, eg "a is 97' ( usefull for seeing what key codes ur keyboard (3rd party keyboards included) is capable of sending)
