$ gcc parser.c -o parser


$ ./parser
tag: '>' 
    tag: 'root|definition|>' 
        tag: 'definition_start|>' 
            tag: 'ISA_DEFINE|word|regex', contents: 'CN'
            tag: 'colon|char', contents: ':'
            tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_end|>' 
                tag: 'comment|regex', contents: '//1xxx: invert all other jump conditions'
                tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_end|EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_item|>' 
                tag: 'item|>' 
                    tag: 'word|regex', contents: '0xx1'
                    tag: 'colon|char', contents: ':'
                tag: 'S|space|char', contents: ' '
                tag: 'single|word|regex', contents: 'none'
            tag: 'definition_end|>' 
                tag: 'S|space|char', contents: ' '
                tag: 'comment|regex', contents: '//jump if test signal of 4004 is = 0'
                tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_item|>' 
                tag: 'item|>' 
                    tag: 'word|regex', contents: '1xx1'
                    tag: 'colon|char', contents: ':'
                tag: 'S|space|char', contents: ' '
                tag: 'single|word|regex', contents: 'none'
            tag: 'definition_end|>' 
                tag: 'S|space|char', contents: ' '
                tag: 'comment|regex', contents: '//jump if test signal of 4004 is = 1'
                tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_item|>' 
                tag: 'item|>' 
                    tag: 'word|regex', contents: '0x1x'
                    tag: 'colon|char', contents: ':'
                tag: 'S|space|char', contents: ' '
                tag: 'single|word|regex', contents: 'none'
            tag: 'definition_end|>' 
                tag: 'S|space|char', contents: ' '
                tag: 'comment|regex', contents: '//jump if carry bit = 1'
                tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_item|>' 
                tag: 'item|>' 
                    tag: 'word|regex', contents: '1x1x'
                    tag: 'colon|char', contents: ':'
                tag: 'S|space|char', contents: ' '
                tag: 'single|word|regex', contents: 'none'
            tag: 'definition_end|>' 
                tag: 'S|space|char', contents: ' '
                tag: 'comment|regex', contents: '//jump if carry bit = 0'
                tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_item|>' 
                tag: 'item|>' 
                    tag: 'word|regex', contents: '01xx'
                    tag: 'colon|char', contents: ':'
                tag: 'S|space|char', contents: ' '
                tag: 'single|word|regex', contents: 'none'
            tag: 'definition_end|>' 
                tag: 'S|space|char', contents: ' '
                tag: 'comment|regex', contents: '//jump if accumulator = 0'
                tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|>' 
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
                tag: 'space|char', contents: ' '
            tag: 'definition_item|>' 
                tag: 'item|>' 
                    tag: 'word|regex', contents: '11xx'
                    tag: 'colon|char', contents: ':'
                tag: 'S|space|char', contents: ' '
                tag: 'single|word|regex', contents: 'none'
            tag: 'definition_end|>' 
                tag: 'S|space|char', contents: ' '
                tag: 'comment|regex', contents: '//jump if accumulator != 0'
                tag: 'EOL|string', contents: '
'
    tag: 'root|definition|>' 
        tag: 'definition_start|>' 
            tag: 'ISA_DEFINE|word|regex', contents: 'ADDR'
            tag: 'colon|char', contents: ':'
            tag: 'EOL|string', contents: '
'
        tag: 'definition_statement|>' 
            tag: 'S|tab|string', contents: '	'
            tag: 'definition_item|>' 
                tag: 'item|>' 
                    tag: 'word|regex', contents: 'xxxx'
                    tag: 'colon|char', contents: ':'
                tag: 'single|word|regex', contents: 'ADDR'
            tag: 'definition_end|EOL|string', contents: '
'
    tag: 'root|instruction|>' 
        tag: 'instruction_start|>' 
            tag: 'ISA_DEFINE|word|regex', contents: 'FIN'
            tag: 'colon|char', contents: ':'
        tag: 'instruction_statement|>' 
            tag: 'S|space|char', contents: ' '
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|word|regex', contents: '0011'
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|word|regex', contents: 'RP'
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|word|regex', contents: '0'
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|space|char', contents: ' '
            tag: 'instruction_end|>' 
                tag: 'comment|regex', contents: '// [0011 000 0] OR [0011 001 0] OR [0011 010 0] and so on [0011 111 0]'
                tag: 'EOL|string', contents: '
'
    tag: 'root|instruction|>' 
        tag: 'instruction_start|>' 
            tag: 'ISA_DEFINE|word|regex', contents: 'JCN'
            tag: 'colon|char', contents: ':'
        tag: 'instruction_statement|>' 
            tag: 'S|space|char', contents: ' '
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|word|regex', contents: '0001'
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|word|regex', contents: 'CN'
            tag: 'instruction_item|space|char', contents: ' '
            tag: 'instruction_item|space|char', contents: ' '
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|word|regex', contents: 'ADDR'
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_item|word|regex', contents: 'ADDR'
            tag: 'instruction_item|char', contents: '|'
            tag: 'instruction_end|EOL|string', contents: '
'
